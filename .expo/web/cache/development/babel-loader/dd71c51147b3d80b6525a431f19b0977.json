{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/admin/Documents/SignalClone/components/ChatRoomItem/ChatRoomItem.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useNavigation } from '@react-navigation/core';\nimport { DataStore } from '@aws-amplify/datastore';\nimport { UserChatRoom, Message } from \"../../src/models\";\nimport styles from \"./styles\";\nimport Auth from '@aws-amplify/auth';\nexport default function ChatRoomItem(_ref) {\n  var chatRoom = _ref.chatRoom;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastMessage = _useState4[0],\n      setLastMessage = _useState4[1];\n\n  var navigation = useNavigation();\n  console.log(chatRoom);\n  useEffect(function () {\n    var fetchUsers = function fetchUsers() {\n      var fetchedUsers, authUser;\n      return _regeneratorRuntime.async(function fetchUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(DataStore.query(UserChatRoom));\n\n            case 2:\n              fetchedUsers = _context.sent.filter(function (UserChatRoom) {\n                return UserChatRoom.chatroom.id === chatRoom.id;\n              }).map(function (UserChatRoom) {\n                return UserChatRoom.user;\n              });\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 5:\n              authUser = _context.sent;\n              setUser(fetchedUsers.find(function (user) {\n                return user.id !== authUser.attributes.sub;\n              }) || null);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchUsers();\n  }, []);\n  useEffect(function () {\n    if (!chatRoom.chatRoomLastMessageId) {\n      return;\n    }\n\n    DataStore.query(Message, chatRoom.chatRoomLastMessageId).then(setLastMessage);\n  }, []);\n\n  var onPress = function onPress() {\n    navigation.navigate('ChatRoom', {\n      id: chatRoom.id\n    });\n  };\n\n  return React.createElement(Pressable, {\n    onPress: onPress,\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: user.imageUri\n    },\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), !!chatRoom.newMessages && React.createElement(View, {\n    style: styles.badgeContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 34\n    }\n  }, React.createElement(Text, {\n    style: styles.badgeText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, chatRoom.newMessages)), React.createElement(View, {\n    style: styles.rightContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, user.name), React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, lastMessage == null ? void 0 : lastMessage.createdAt)), React.createElement(Text, {\n    numberOfLines: 1,\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, lastMessage == null ? void 0 : lastMessage.content)));\n}","map":{"version":3,"sources":["/Users/admin/Documents/SignalClone/components/ChatRoomItem/ChatRoomItem.tsx"],"names":["React","useState","useEffect","useNavigation","DataStore","UserChatRoom","Message","styles","Auth","ChatRoomItem","chatRoom","user","setUser","lastMessage","setLastMessage","navigation","console","log","fetchUsers","query","fetchedUsers","filter","chatroom","id","map","currentAuthenticatedUser","authUser","find","attributes","sub","chatRoomLastMessageId","then","onPress","navigate","container","uri","imageUri","image","newMessages","badgeContainer","badgeText","rightContainer","row","name","text","createdAt","content"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, Image, View, Pressable, ActivityIndicator } from 'react-native';\nimport { useNavigation } from '@react-navigation/core';\nimport { DataStore } from '@aws-amplify/datastore';\nimport { UserChatRoom, User, Message } from '../../src/models';\nimport styles from './styles';\nimport Auth from '@aws-amplify/auth';\n\nexport default function ChatRoomItem({ chatRoom }) {\n  // const [users, setUsers] = useState<User[]>([]); // all users in this chatroom\n  const [user, setUser] = useState<User|null>(null); // the display user\n  const [lastMessage, setLastMessage] = useState<Message|undefined>();\n\n  const navigation = useNavigation();\n  console.log(chatRoom);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const fetchedUsers = (await DataStore.query(UserChatRoom))\n        .filter(UserChatRoom => UserChatRoom.chatroom.id === chatRoom.id)\n        .map(UserChatRoom => UserChatRoom.user);\n\n      // setUsers(fetchedUsers);\n\n      const authUser = await Auth.currentAuthenticatedUser();\n      setUser(fetchedUsers.find(user => user.id !== authUser.attributes.sub) || null);\n    };\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    if (!chatRoom.chatRoomLastMessageId) { return }\n    DataStore.query(Message, chatRoom.chatRoomLastMessageId).then(setLastMessage);\n  }, [])\n\n  const onPress = () => {\n    navigation.navigate('ChatRoom', { id: chatRoom.id });\n  }\n\n \n\n  return (\n    <Pressable onPress={onPress} style={styles.container}>\n      <Image source={{ uri: user.imageUri}} style={styles.image} />\n\n      {!!chatRoom.newMessages && <View style={styles.badgeContainer}>\n        <Text style={styles.badgeText}>{chatRoom.newMessages}</Text>\n      </View>}\n\n      <View style={styles.rightContainer}>\n        <View style={styles.row}>\n          <Text style={styles.name}>{user.name}</Text>\n          <Text style={styles.text}>{lastMessage?.createdAt}</Text>\n        </View>\n        <Text numberOfLines={1} style={styles.text}>{lastMessage?.content}</Text>\n      </View>\n    </Pressable>\n  );\n}"]},"metadata":{},"sourceType":"module"}