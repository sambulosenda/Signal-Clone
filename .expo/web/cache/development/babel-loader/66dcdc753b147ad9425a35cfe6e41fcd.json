{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Documents/SignalClone/components/Message/Message.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { DataStore } from '@aws-amplify/datastore';\nimport { User } from \"../../src/models\";\nimport { Auth } from 'aws-amplify';\nvar blue = '#3777f0';\nvar grey = 'lightgrey';\nvar myID = 'u1';\n\nvar Message = function Message(_ref) {\n  var message = _ref.message;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isMe = _useState4[0],\n      setIsMe = _useState4[1];\n\n  useEffect(function () {\n    DataStore.query(User, message.userID).then(setUser);\n  }, []);\n  useEffect(function () {\n    var checkIfMe = function checkIfMe() {\n      var authUser;\n      return _regeneratorRuntime.async(function checkIfMe$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (user) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 4:\n              authUser = _context.sent;\n              setIsMe(user.id === authUser.attributes.sub);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    checkIfMe();\n  }, [user]);\n\n  if (!user) {\n    return React.createElement(ActivityIndicator, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: [styles.container, isMe ? styles.rightContainer : styles.leftContainer],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: isMe ? 'black' : 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, message.content));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10,\n    margin: 10,\n    borderRadius: 10,\n    maxWidth: '75%'\n  },\n  leftContainer: {\n    backgroundColor: blue,\n    marginLeft: 10,\n    marginRight: 'auto'\n  },\n  rightContainer: {\n    backgroundColor: grey,\n    marginLeft: 'auto',\n    marginRight: 10\n  }\n});\nexport default Message;","map":{"version":3,"sources":["/Users/admin/Documents/SignalClone/components/Message/Message.tsx"],"names":["React","useState","useEffect","DataStore","User","Auth","blue","grey","myID","Message","message","user","setUser","isMe","setIsMe","query","userID","then","checkIfMe","currentAuthenticatedUser","authUser","id","attributes","sub","styles","container","rightContainer","leftContainer","color","content","StyleSheet","create","padding","margin","borderRadius","maxWidth","backgroundColor","marginLeft","marginRight"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,IAAT;AACA,SAASC,IAAT,QAAqB,aAArB;AAEA,IAAMC,IAAI,GAAG,SAAb;AACA,IAAMC,IAAI,GAAG,WAAb;AAEA,IAAMC,IAAI,GAAG,IAAb;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAiB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAC/B,kBAAwBT,QAAQ,EAAhC;AAAA;AAAA,MAAOU,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAwBX,QAAQ,CAAU,KAAV,CAAhC;AAAA;AAAA,MAAOY,IAAP;AAAA,MAAaC,OAAb;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,SAAS,CAACY,KAAV,CAAgBX,IAAhB,EAAsBM,OAAO,CAACM,MAA9B,EAAsCC,IAAtC,CAA2CL,OAA3C;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACXP,IADW;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+CAION,IAAI,CAACc,wBAAL,EAJP;;AAAA;AAIVC,cAAAA,QAJU;AAKhBN,cAAAA,OAAO,CAACH,IAAI,CAACU,EAAL,KAAYD,QAAQ,CAACE,UAAT,CAAoBC,GAAjC,CAAP;;AALgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAOAL,IAAAA,SAAS;AACV,GATQ,EASN,CAACP,IAAD,CATM,CAAT;;AAWA,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACa,MAAM,CAACC,SAAR,EAAmBZ,IAAI,GAAGW,MAAM,CAACE,cAAV,GAA2BF,MAAM,CAACG,aAAzD,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAEf,IAAI,GAAG,OAAH,GAAa;AAA1B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkDH,OAAO,CAACmB,OAA1D,CADF,CADF;AAKD,CA5BD;;AA8BA,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,OAAO,EAAE,EADA;AAETC,IAAAA,MAAM,EAAE,EAFC;AAGTC,IAAAA,YAAY,EAAE,EAHL;AAITC,IAAAA,QAAQ,EAAE;AAJD,GADoB;AAO/BR,EAAAA,aAAa,EAAE;AACbS,IAAAA,eAAe,EAAE9B,IADJ;AAEb+B,IAAAA,UAAU,EAAE,EAFC;AAGbC,IAAAA,WAAW,EAAE;AAHA,GAPgB;AAY/BZ,EAAAA,cAAc,EAAE;AACdU,IAAAA,eAAe,EAAE7B,IADH;AAEd8B,IAAAA,UAAU,EAAE,MAFE;AAGdC,IAAAA,WAAW,EAAE;AAHC;AAZe,CAAlB,CAAf;AAmBA,eAAe7B,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { View, Text, StyleSheet, ActivityIndicator } from 'react-native';\nimport { DataStore } from '@aws-amplify/datastore';\nimport { User } from '../../src/models';\nimport { Auth } from 'aws-amplify';\n\nconst blue = '#3777f0';\nconst grey = 'lightgrey';\n\nconst myID = 'u1';\n\nconst Message = ({ message }) => {\n  const [user, setUser] = useState<User|undefined>();\n  const [isMe, setIsMe] = useState<boolean>(false);\n\n  useEffect(() => {\n    DataStore.query(User, message.userID).then(setUser);\n  }, []);\n\n  useEffect(() => {\n    const checkIfMe = async () => {\n      if (!user) {\n        return;\n      }\n      const authUser = await Auth.currentAuthenticatedUser();\n      setIsMe(user.id === authUser.attributes.sub);\n    }\n    checkIfMe();\n  }, [user])\n\n  if (!user) {\n    return <ActivityIndicator />\n  }\n\n  return (\n    <View style={[styles.container, isMe ? styles.rightContainer : styles.leftContainer]}>\n      <Text style={{ color: isMe ? 'black' : 'white'}}>{message.content}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10,\n    margin: 10,\n    borderRadius: 10,\n    maxWidth: '75%',\n  },\n  leftContainer: {\n    backgroundColor: blue,\n    marginLeft: 10,\n    marginRight: 'auto'\n  },\n  rightContainer: {\n    backgroundColor: grey,\n    marginLeft: 'auto',\n    marginRight: 10,\n  }\n});\n\nexport default Message;"]},"metadata":{},"sourceType":"module"}