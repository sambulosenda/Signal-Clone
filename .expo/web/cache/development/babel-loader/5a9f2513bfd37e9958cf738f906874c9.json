{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/admin/Documents/SignalClone/screens/ChatRoomScreen.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useRoute, useNavigation } from '@react-navigation/core';\nimport { DataStore } from '@aws-amplify/datastore';\nimport { ChatRoom, Message as MessageModel } from \"../src/models\";\nimport Message from \"../components/Message\";\nimport MessageInput from \"../components/MessageInput\";\nimport { SortDirection } from 'aws-amplify';\nexport default function ChatRoomScreen() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chatRoom = _useState4[0],\n      setChatRoom = _useState4[1];\n\n  var route = useRoute();\n  var navigation = useNavigation();\n  useEffect(function () {\n    fetchChatRoom();\n  }, []);\n  useEffect(function () {\n    fetchMessages();\n  }, [chatRoom]);\n  useEffect(function () {\n    var subscription = DataStore.observe(MessageModel).subscribe(function (msg) {\n      console.log(msg.model, msg.opType, msg.element);\n\n      if (msg.model === MessageModel && msg.opType === 'INSERT') {\n        setMessages(function (existingMessage) {\n          return [msg.element].concat(_toConsumableArray(existingMessage));\n        });\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n\n  var fetchChatRoom = function fetchChatRoom() {\n    var _route$params;\n\n    var chatRoom;\n    return _regeneratorRuntime.async(function fetchChatRoom$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if ((_route$params = route.params) != null && _route$params.id) {\n              _context.next = 3;\n              break;\n            }\n\n            console.warn(\"No chatroom id provided\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(DataStore.query(ChatRoom, route.params.id));\n\n          case 5:\n            chatRoom = _context.sent;\n\n            if (!chatRoom) {\n              console.error(\"Couldn't find a chat room with this id\");\n            } else {\n              setChatRoom(chatRoom);\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var fetchMessages = function fetchMessages() {\n    var fetchedMessages;\n    return _regeneratorRuntime.async(function fetchMessages$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (chatRoom) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(DataStore.query(MessageModel, function (message) {\n              return message.chatroomID(\"eq\", chatRoom == null ? void 0 : chatRoom.id);\n            }, {\n              sort: function sort(message) {\n                return message.createdAt(SortDirection.DESCENDING);\n              }\n            }));\n\n          case 4:\n            fetchedMessages = _context2.sent;\n            console.log(fetchedMessages);\n            setMessages(fetchedMessages);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  navigation.setOptions({\n    title: 'Elon Musk'\n  });\n\n  if (!chatRoom) {\n    return React.createElement(ActivityIndicator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: styles.page,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: messages,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(Message, {\n        message: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 34\n        }\n      });\n    },\n    inverted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), React.createElement(MessageInput, {\n    chatRoom: chatRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n;\nvar styles = StyleSheet.create({\n  page: {\n    backgroundColor: 'white',\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/admin/Documents/SignalClone/screens/ChatRoomScreen.tsx"],"names":["React","useState","useEffect","useRoute","useNavigation","DataStore","ChatRoom","Message","MessageModel","MessageInput","SortDirection","ChatRoomScreen","messages","setMessages","chatRoom","setChatRoom","route","navigation","fetchChatRoom","fetchMessages","subscription","observe","subscribe","msg","console","log","model","opType","element","existingMessage","unsubscribe","params","id","warn","query","error","message","chatroomID","sort","createdAt","DESCENDING","fetchedMessages","setOptions","title","styles","page","item","StyleSheet","create","backgroundColor","flex"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Text, View, StyleSheet, FlatList, SafeAreaView, ActivityIndicator} from 'react-native';\nimport { useRoute, useNavigation } from '@react-navigation/core';\nimport { DataStore } from '@aws-amplify/datastore';\nimport { ChatRoom, Message as MessageModel } from '../src/models';\nimport Message  from '../components/Message';\nimport MessageInput from '../components/MessageInput';\nimport { SortDirection } from 'aws-amplify';\n\nexport default function ChatRoomScreen() {\n  const [messages, setMessages] = useState<MessageModel[]>([]);\n  const [chatRoom, setChatRoom] = useState<ChatRoom|null>(null);\n\n  const route = useRoute();\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    fetchChatRoom();\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n  }, [chatRoom]);\n\n  useEffect(() => {\n    const subscription = DataStore.observe(MessageModel).subscribe(msg => {\n      console.log(msg.model, msg.opType, msg.element);\n      if (msg.model === MessageModel && msg.opType === 'INSERT') {\n        setMessages(existingMessage => [msg.element,...existingMessage])\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const fetchChatRoom = async () => {\n    if (!route.params?.id) {\n      console.warn(\"No chatroom id provided\");\n      return;\n    }\n    const chatRoom = await DataStore.query(ChatRoom, route.params.id);\n    if (!chatRoom) {\n      console.error(\"Couldn't find a chat room with this id\");\n    } else {\n      setChatRoom(chatRoom);\n    }\n  };\n\n  const fetchMessages = async () => {\n    if (!chatRoom) {\n      return;\n    }\n    const fetchedMessages = await DataStore.query(MessageModel, \n      message => message.chatroomID(\"eq\", chatRoom?.id),\n      {\n        sort: message => message.createdAt(SortDirection.DESCENDING)\n      }\n    );\n    console.log(fetchedMessages);\n    setMessages(fetchedMessages);\n  };\n\n  navigation.setOptions({title: 'Elon Musk'})\n\n  if (!chatRoom) {\n    return <ActivityIndicator />\n  }\n\n  return (\n    <SafeAreaView style={styles.page}>\n      <FlatList\n        data={messages}\n        renderItem={({ item}) => <Message message={item} />}\n        inverted\n      />\n      <MessageInput chatRoom={chatRoom} />\n    </SafeAreaView>\n  )\n};\n\nconst styles = StyleSheet.create({\n  page: {\n    backgroundColor: 'white',\n    flex: 1,\n  }\n})"]},"metadata":{},"sourceType":"module"}